{"version":3,"file":"datepicker.js","sourceRoot":"","sources":["../../src/datepicker/datepicker.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, Input, OnChanges, TemplateRef, forwardRef, OnInit, SimpleChanges} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {NgbCalendar} from './ngb-calendar';\nimport {NgbDate} from './ngb-date';\nimport {NgbDatepickerService} from './datepicker-service';\nimport {MonthViewModel, NavigationEvent} from './datepicker-view-model';\nimport {toInteger} from '../util/util';\nimport {DayTemplateContext} from './datepicker-day-template-context';\nimport {NgbDatepickerConfig} from './datepicker-config';\nimport {NgbDateStruct} from './ngb-date-struct';\n\nconst NGB_DATEPICKER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NgbDatepicker),\n  multi: true\n};\n\n/**\n * A lightweight and highly configurable datepicker directive\n */\n\nexport class NgbDatepicker implements OnChanges,\n    OnInit, ControlValueAccessor {\n  _date: NgbDate;\n  _maxDate: NgbDate;\n  _minDate: NgbDate;\n\n  model: NgbDate;\n  month: MonthViewModel;\n\n  /**\n   * Reference for the custom template for the day display\n   */\n   dayTemplate: TemplateRef<DayTemplateContext>;\n\n  /**\n   * First day of the week. With default calendar we use ISO 8601: 'weekday' is 1=Mon ... 7=Sun\n   */\n   firstDayOfWeek: number;\n\n  /**\n   * Callback to mark a given date as disabled.\n   * 'Current' contains the month that will be displayed in the view\n   */\n   markDisabled: (date: NgbDateStruct, current: {year: number, month: number}) => boolean;\n\n  /**\n   * Min date for the navigation. If not provided will be 10 years before today or `startDate`\n   */\n   minDate: NgbDateStruct;\n\n  /**\n   * Max date for the navigation. If not provided will be 10 years from today or `startDate`\n   */\n   maxDate: NgbDateStruct;\n\n  /**\n   * The way to display days that don't belong to current month: `visible` (default),\n   * `hidden` (not displayed) or `collapsed` (not displayed with empty space collapsed)\n   */\n   outsideDays: 'visible' | 'collapsed' | 'hidden';\n\n  /**\n   * Whether to display navigation\n   */\n   showNavigation: boolean;\n\n  /**\n   * Whether to display days of the week\n   */\n   showWeekdays: boolean;\n\n  /**\n   * Whether to display week numbers\n   */\n   showWeekNumbers: boolean;\n\n  /**\n   * Date to open calendar with.\n   * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n   * If nothing provided, calendar will open with current month.\n   * Use 'navigateTo(date)' as an alternative\n   */\n   startDate: {year: number, month: number};\n\n  disabled = false;\n\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  constructor(private _service: NgbDatepickerService, private _calendar: NgbCalendar, config: NgbDatepickerConfig) {\n    this.dayTemplate = config.dayTemplate;\n    this.firstDayOfWeek = config.firstDayOfWeek;\n    this.markDisabled = config.markDisabled;\n    this.minDate = config.minDate;\n    this.maxDate = config.maxDate;\n    this.outsideDays = config.outsideDays;\n    this.showNavigation = config.showNavigation;\n    this.showWeekdays = config.showWeekdays;\n    this.showWeekNumbers = config.showWeekNumbers;\n    this.startDate = config.startDate;\n  }\n\n  /**\n   * Navigates current view to provided date.\n   * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n   * If nothing provided calendar will open current month.\n   * Use 'startDate' input as an alternative\n   */\n  navigateTo(date?: {year: number, month: number}) {\n    this._setViewWithinLimits(date ? NgbDate.from(date) : this._calendar.getToday());\n    this._updateData();\n  }\n\n  ngOnInit() {\n    this._setDates();\n    this.navigateTo(this.startDate);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._setDates();\n    this.navigateTo(this.startDate);\n  }\n\n  onDateSelect(date: NgbDate) {\n    this._setViewWithinLimits(date);\n\n    this.onTouched();\n    this.writeValue(date);\n    this.onChange({year: date.year, month: date.month, day: date.day});\n\n    // switch current month\n    if (this._date.month !== this.month.number) {\n      this._updateData();\n    }\n  }\n\n  onNavigateDateSelect(date: NgbDate) {\n    this._setViewWithinLimits(date);\n    this._updateData();\n  }\n\n  onNavigateEvent(event: NavigationEvent) {\n    switch (event) {\n      case NavigationEvent.PREV:\n        this._setViewWithinLimits(this._calendar.getPrev(this._date, 'm'));\n        break;\n      case NavigationEvent.NEXT:\n        this._setViewWithinLimits(this._calendar.getNext(this._date, 'm'));\n        break;\n    }\n\n    this._updateData();\n  }\n\n  registerOnChange(fn: (value: any) => any): void { this.onChange = fn; }\n\n  registerOnTouched(fn: () => any): void { this.onTouched = fn; }\n\n  writeValue(value) { this.model = value ? new NgbDate(value.year, value.month, value.day) : null; }\n\n  setDisabledState(isDisabled: boolean) { this.disabled = isDisabled; }\n\n  private _setDates() {\n    this._maxDate = NgbDate.from(this.maxDate);\n    this._minDate = NgbDate.from(this.minDate);\n    this._date = this.startDate ? NgbDate.from(this.startDate) : this._calendar.getToday();\n\n    if (!this._minDate) {\n      this._minDate = this._calendar.getPrev(this._date, 'y', 10);\n    }\n\n    if (!this._maxDate) {\n      this._maxDate = this._calendar.getNext(this._date, 'y', 11);\n      this._maxDate = this._calendar.getPrev(this._maxDate);\n    }\n\n    if (this._minDate && this._maxDate && this._maxDate.before(this._minDate)) {\n      throw new Error(`'maxDate' ${this._maxDate} should be greater than 'minDate' ${this._minDate}`);\n    }\n  }\n\n  private _setViewWithinLimits(date: NgbDate) {\n    if (this._minDate && date.before(this._minDate)) {\n      this._date = new NgbDate(this._minDate.year, this._minDate.month, 1);\n    } else if (this._maxDate && date.after(this._maxDate)) {\n      this._date = new NgbDate(this._maxDate.year, this._maxDate.month, 1);\n    } else {\n      this._date = new NgbDate(date.year, date.month, 1);\n    }\n  }\n\n  private _updateData() {\n    this.month = this._service.generateMonthViewModel(\n        this._date, this._minDate, this._maxDate, toInteger(this.firstDayOfWeek), this.markDisabled);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  exportAs: 'ngbDatepicker',\n  selector: 'ngb-datepicker',\n  template: `\n    <template #dt let-date=\"date\" let-currentMonth=\"currentMonth\" let-selected=\"selected\" let-disabled=\"disabled\">\n       <div ngbDatepickerDayView [date]=\"date\" [currentMonth]=\"currentMonth\" [selected]=\"selected\" [disabled]=\"disabled\"></div>\n    </template>\n    \n    <table>\n      <tbody *ngIf=\"showNavigation\" ngbDatepickerNavigation\n        [date]=\"_date\"\n        [minDate]=\"_minDate\"\n        [maxDate]=\"_maxDate\"\n        [disabled]=\"disabled\"\n        [showWeekNumbers]=\"showWeekNumbers\"\n        (navigate)=\"onNavigateEvent($event)\"\n        (select)=\"onNavigateDateSelect($event)\">\n      </tbody>\n      \n      <tbody ngbDatepickerMonthView\n        [month]=\"month\"\n        [selectedDate]=\"model\"\n        [dayTemplate]=\"dayTemplate || dt\"\n        [showWeekdays]=\"showWeekdays\"\n        [showWeekNumbers]=\"showWeekNumbers\"\n        [disabled]=\"disabled\"\n        [outsideDays]=\"outsideDays\"\n        (select)=\"onDateSelect($event)\">\n      </tbody>\n    </table>\n  `,\n  providers: [NGB_DATEPICKER_VALUE_ACCESSOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: NgbDatepickerService, },\n{type: NgbCalendar, },\n{type: NgbDatepickerConfig, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'dayTemplate': [{ type: Input },],\n'firstDayOfWeek': [{ type: Input },],\n'markDisabled': [{ type: Input },],\n'minDate': [{ type: Input },],\n'maxDate': [{ type: Input },],\n'outsideDays': [{ type: Input },],\n'showNavigation': [{ type: Input },],\n'showWeekdays': [{ type: Input },],\n'showWeekNumbers': [{ type: Input },],\n'startDate': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}